// THIS FILE IS AUTO-GENERATED BY KordEnumProcessor.kt, DO NOT EDIT!
@file:Suppress(names = arrayOf("RedundantVisibilityModifier", "IncorrectFormatting",
                "ReplaceArrayOfWithLiteral", "SpellCheckingInspection", "GrazieInspection"))

package dev.schlaubi.lavakord.plugins.lavasearch.model

import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.LazyThreadSafetyMode.PUBLICATION
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import kotlinx.serialization.KSerializer
import kotlinx.serialization.Serializable
import kotlinx.serialization.descriptors.PrimitiveKind
import kotlinx.serialization.descriptors.PrimitiveSerialDescriptor
import kotlinx.serialization.descriptors.SerialDescriptor
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder

/**
 * See [SearchType]s in the
 * [Discord Developer Documentation](https://github.com/topi314/LavaSearch?tab=readme-ov-file#api).
 */
@Serializable(with = SearchType.Serializer::class)
public sealed class SearchType(
    /**
     * The raw value used by Discord.
     */
    public val `value`: String,
) {
    public final override fun equals(other: Any?): Boolean = this === other ||
            (other is SearchType && this.value == other.value)

    public final override fun hashCode(): Int = value.hashCode()

    public final override fun toString(): String =
            "SearchType.${this::class.simpleName}(value=$value)"

    /**
     * An unknown [SearchType].
     *
     * This is used as a fallback for [SearchType]s that haven't been added to Kord yet.
     */
    public class Unknown(
        `value`: String,
    ) : SearchType(value)

    public object Track : SearchType("track")

    public object Album : SearchType("album")

    public object Artist : SearchType("artist")

    public object Playlist : SearchType("playlist")

    /**
     * Search suggestions
     */
    public object Text : SearchType("text")

    internal object Serializer : KSerializer<SearchType> {
        public override val descriptor: SerialDescriptor =
                PrimitiveSerialDescriptor("dev.schlaubi.lavakord.plugins.lavasearch.model.SearchType",
                PrimitiveKind.STRING)

        public override fun serialize(encoder: Encoder, `value`: SearchType) =
                encoder.encodeString(value.value)

        public override fun deserialize(decoder: Decoder) =
                when (val value = decoder.decodeString()) {
            "track" -> Track
            "album" -> Album
            "artist" -> Artist
            "playlist" -> Playlist
            "text" -> Text
            else -> Unknown(value)
        }
    }

    public companion object {
        /**
         * A [List] of all known [SearchType]s.
         */
        public val entries: List<SearchType> by lazy(mode = PUBLICATION) {
            listOf(
                Track,
                Album,
                Artist,
                Playlist,
                Text,
            )
        }

    }
}
